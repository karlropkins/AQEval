[{"path":"https://karlropkins.github.io/AQEval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karl Ropkins. Author, maintainer. Anthony Walker. Contributor. James Tate. Contributor.","code":""},{"path":"https://karlropkins.github.io/AQEval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Karl Ropkins, Anthony Walker, James Tate (2022) AQEval: Air Quality Evaluation, R package version 0.3.0.","code":"@Manual{,   title = {AQEval: Air Quality Evaluation},   author = {Karl Ropkins and Anthony Walker and James Tate},   year = {2022},   note = {R package version 0.3.0}, }"},{"path":"https://karlropkins.github.io/AQEval/index.html","id":"aqeval-","dir":"","previous_headings":"","what":"R Package","title":"R Package","text":"Beta-release package R code Air Quality Evaluation. AQEval developed use tasked routine detection, characterisation quantification discrete changes air quality time-series, identifying impacts air quality policy interventions.","code":""},{"path":"https://karlropkins.github.io/AQEval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package","text":"AQEval GitHub: AQEval .tar.gz file:","code":"# (if you do not have remotes package, install it from CRAN)  # install.packages(\"remotes\") remotes::install_github(\"karlropkins/AQEval\") # (if you do not have remotes package, install it from CRAN)  # install.packages(\"remotes\") remotes::install_local(file.choose()) # and select"},{"path":"https://karlropkins.github.io/AQEval/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"R Package","text":"packages contain beta-testing code developed part -going project.","code":""},{"path":"https://karlropkins.github.io/AQEval/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"R Package","text":"Contributions welcome.","code":""},{"path":"https://karlropkins.github.io/AQEval/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"R Package","text":"GPL-3","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://karlropkins.github.io/AQEval/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":null,"dir":"Reference","previous_headings":"","what":"AQEval Example data — AQEval.data","title":"AQEval Example data — AQEval.data","text":"Data packaged AQEval use example code.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AQEval Example data — AQEval.data","text":"","code":"aq.data"},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AQEval Example data — AQEval.data","text":"(26280x6) 'tbl_df' objects date Time-series POSIX class date time records. no2 Time-series   nitrogen dioxide measurements local site. bg.no2 Time-series   nitrogen dioxide measurements nearby   background site. ws Time-series   local wind speed measurements. wd Time-series   local wind direction measurements. air_temp Time-series   local air temperature measurements.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AQEval Example data — AQEval.data","text":"Air quality meteorological data packaged use AQEval Examples. Time-series sources: date Date--time-stamp POSIX class  (DateTimeClasses). no2 Nitrogen dioxide downloaded King's  College London Archive using importKCL  function openair. bg.no2  Nitrogen dioxide downloaded  Automatic Urban Rural Network Archive using  importAURN function openair. ws, wd, air_temp Wind  speed, wind direction air temperature downloaded  NOAA's Integrated Surface Database using importNOAA  function worldmet.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AQEval Example data — AQEval.data","text":"functions AQEval adopt openair convention assuming supplied data single data.frame similar. data frame initially adopted two reasons: Firstly, air quality data collected archived numerous formats keeping import requirements simple minimises frustrations associated data importation. Secondly, restricting user work single data format greatly simplifies data management less familiar programming environments. part work several openair coding conventions adopted, importantly data sets include column named date ‘POSIX’ class data--time-stamps (DateTimeClasses). conventions, use ws wd numeric wind speed direction data-series, site code character factor monitoring site name identifier code, now commonplace many working R air quality research community, many air quality archives provide data (support import functions convert data structures ) openair-friendly structure.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AQEval Example data — AQEval.data","text":"Regarding openair openair-friendly data structuring, see: Carslaw, D. C. K. Ropkins (2012), openair --- R package air quality data analysis. Environmental Modelling & Software. Volume 27-28, 52-61, DOI doi: 10.1016/j.envsoft.2011.09.008 Ropkins, K. D.C. Carslaw (2012), openair-Data Analysis Tools Air Quality Community. R Journal, 4(1). URL https://journal.r-project.org/archive/2012/RJ-2012-003/RJ-2012-003.pdf Regarding worldmet, see: David Carslaw (2021), worldmet: Import Surface Meteorological Data NOAA Integrated Surface Database (ISD). R package version 0.9.5. URL https://CRAN.R-project.org/package=worldmet","code":""},{"path":[]},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.html","id":null,"dir":"Reference","previous_headings":"","what":"Air Quality Evaluation — AQEval","title":"Air Quality Evaluation — AQEval","text":"R AQEval: package R code analysis discrete change Air Quality time-series discrete.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.html","id":"aqeval","dir":"Reference","previous_headings":"","what":"AQEval","title":"Air Quality Evaluation — AQEval","text":"AQEval developed use tasked routine detection, characterisation quantification discrete changes air quality time-series. main functions, quantBreakPoints quantBreakSegments, use break-point/segment (BP/S) methods based consecutive use methods strucchange segmented R packages first detection (break-points) characterise quantify (segments), discrete changes air-quality time-series. AQEval functions adopt openair-friendly approach using function data structures many air quality research community already familiar . notably, functions expect supplied data time-series, supplied single data.frame (similar R object), time-series identified column names. main functions typically structured expect first data.frame, name pollutant used, arguments: function(data, \"polluant.name\", ...) output <- function(data, \"polluant.name\", ...)","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Air Quality Evaluation — AQEval","text":"Ropkins et al (Prep).","code":""},{"path":[]},{"path":"https://karlropkins.github.io/AQEval/reference/AQEval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Air Quality Evaluation — AQEval","text":"Karl Ropkins","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/calculate.stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Some functions to calculate statistics — calculate.stats","title":"Some functions to calculate statistics — calculate.stats","text":"Calculate data set statistics selected time intervals.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/calculate.stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some functions to calculate statistics — calculate.stats","text":"","code":"calcDateRangeStat(   data,   from = NULL,   to = NULL,   stat = NULL,   pollutant = NULL,   ...,   method = 2 )  calcRollingDateRangeStat(   data,   range = \"year\",   res = \"day\",   stat = NULL,   pollutant = NULL,   from = NULL,   to = NULL,   ...,   method = 2 )"},{"path":"https://karlropkins.github.io/AQEval/reference/calculate.stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some functions to calculate statistics — calculate.stats","text":"data (data.frame, tibble, etc) Data set containing data statistic calculated , date column date/time records. (various) Start date(s) subsample calculating statistic, default end supplied data date range. (various) End date(s) subsample calculating statistic, default end supplied data date range. stat (function) Statistic applied selected data, default mean(pollutant, na.rm=TRUE). pollutant (character) name(s) data-series analyse data, default columns supplied data except date. ... extra arguments. method (numeric) Method use calculating statistic. range (character) calcRollingDateRange, range rolling date windows, default 'year' annual statistic calculations. res (character) calcRollingDateRange, resolution calculate rolling statistic , default 'day' calculate per day.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/calculate.stats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Some functions to calculate statistics — calculate.stats","text":"functions development likely change significantly future versions, please handle care.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"find and test break-points — find.breaks","title":"find and test break-points — find.breaks","text":"Finding testing break-points conventionally formatted air quality data sets.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find and test break-points — find.breaks","text":"","code":"findBreakPoints(data, pollutant, h = 0.15, ...)  testBreakPoints(data, pollutant, breaks, ...)"},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find and test break-points — find.breaks","text":"data Data source, typically data.frame similar, containing data-series apply function paired time-stamped data-series, called date. pollutant Name time-series, assumed column date. h (findBreakPoints ) data/time window size use looking breaks supplied time-series, expressed proportion time-series (0-1), default 0.15. ... parameters breaks (testBreakPoints ) data.frame break-points confidence intervals, typically findBreakPoints output.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find and test break-points — find.breaks","text":"findBreakPoints returns data.frameof found break-points. testBreakPoints return likely break-point/segment report.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find and test break-points — find.breaks","text":"findBreakPoints uses methods strucchange package (see references) modifications suggested main author strucchange handle missing cases find potential breaks-points supplied time-series. testBreakPoints tests identifies likely break-points using methods proposed use quantBreakPoints quantBreakSegments conventionally formatted air quality data sets.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.breaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"find and test break-points — find.breaks","text":"Regarding strucchange methods see breakpoints, : Achim Zeileis, Friedrich Leisch, Kurt Hornik Christian Kleiber (2002). strucchange: R Package Testing Structural Change Linear Regression Models. Journal Statistical Software, 7(2), 1-38. URL https://www.jstatsoft.org/v07/i02/. Achim Zeileis, Christian Kleiber, Walter Kraemer Kurt Hornik (2003). Testing Dating Structural Changes Practice. Computational Statistics & Data Analysis, 44, 109-123. Regarding missing data handling, see: URL: https://stackoverflow.com/questions/43243548/strucchange--reporting-breakdates. Regarding testBreakPoints, see: Ropkins et al (Prep).","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.near.html","id":null,"dir":"Reference","previous_headings":"","what":"find nearby sites — find.near","title":"find nearby sites — find.near","text":"Function find nearest locations reference latitude longitude.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.near.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find nearby sites — find.near","text":"","code":"findNearLatLon(lat, lon = NULL, nmax = 10, ..., ref = NULL, units = \"m\")  findNearSites(   lat,   lon,   pollutant = \"no2\",   site.type = \"rural background\",   nmax = 10,   ...,   ref = NULL,   units = \"m\" )"},{"path":"https://karlropkins.github.io/AQEval/reference/find.near.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find nearby sites — find.near","text":"lat, lon (numeric) supplied latitude longitude. nmax (numeric) maximum number nearest sites report, default 10. ... parameters, currently ignored. ref (data.frame similar) look-table use identifying nearby locations, expected contain latitude, longitude required location identifier data-series. default, findNearSites uses openair importMeta output supplied required input findNearLatLon. units (character) units use reporting distances near locations; current options m. pollutant (character) findNearSites , pollutant interest, default NO2. site.type (character) findNearSites , monitoring site type, default Rural Background.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.near.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find nearby sites — find.near","text":"investigating air quality particular location, example UK Clean Air Zone (https://www.gov.uk/guidance/driving---clean-air-zone), may wish locate appropriate rural background air quality monitoring station. findNearSites locates air quality monitoring sites openly available data available UK AURN network (https://uk-air.defra.gov.uk/networks/network-info?view=aurn)","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/find.near.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"find nearby sites — find.near","text":"function uses haversine formula account Earth's surface curvature, uses 6371 km radius earth.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/fitNearSiteModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Other Air Quality Models — other.aq.models","title":"Other Air Quality Models — other.aq.models","text":"packaged Air Quality Models.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/fitNearSiteModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other Air Quality Models — other.aq.models","text":"","code":"fitNearSiteModel(data, pollutant = \"no2\", y, x = \"rest\", elements = NULL, ...)"},{"path":"https://karlropkins.github.io/AQEval/reference/fitNearSiteModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other Air Quality Models — other.aq.models","text":"data data.frame (similar) containing data-series modelled; expected contain 'date', 'site' pollutant interest data-series. pollutant name pollutant (data) model, default 'NO2'. y name monitor site modelled, assumed one several names site column data. x sites use building model, default 'rest' uses supplied sites except 'y'. elements number inputs use site models, can number length x combination thereof; default set length(x):1 ... extra arguments.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/fitNearSiteModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Other Air Quality Models — other.aq.models","text":"fitNearSiteModel builds air quality model one location using air quality data nearby sites.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":null,"dir":"Reference","previous_headings":"","what":"isolateContribution — isolate.signal","title":"isolateContribution — isolate.signal","text":"Environmental time-series signal processing: Contribution isolation based background subtraction, deseasonalisation /deweathering.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"isolateContribution — isolate.signal","text":"","code":"isolateContribution(   data,   pollutant,   background = NULL,   deseason = TRUE,   deweather = TRUE,   method = 2,   add.term = NULL,   formula = NULL,   output = \"mean\",   ... )"},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"isolateContribution — isolate.signal","text":"data Data source, typically data.frame (similar), containing time-series used applying signal processing. pollutant column name data time-series signal processed. background (optional) supplied, background time-series use background correction. See . deseason logical character vector, TRUE (default), pollutant deseasonalised using day.hour year.day frequency terms, calculate data time stamp, assumed date data. options: FALSE turn deseasonalisation; character vector frequency terms user-defining. See . deweather logical character vector, TRUE (default), data deweathered using wind speed direction, assumed ws wd data). options: FALSE turn deweathering; character vector data column names user-defining. See . method numeric, contribution isolation method (default 2). See Note. add.term extra terms add contribution isolation model; ignore now (development). formula (optional) Signal isolate model formula; allows user set signal isolation model formula directly, means formula terms (background, deseason deweather) ignored. output output options; ignore now (development) ... arguments; ignore now (development)","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"isolateContribution — isolate.signal","text":"isolateContribution returns vector predictions pollutant time-series requested signal isolation.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"isolateContribution — isolate.signal","text":"isolateContribution estimates subtracts pollutant variance associated factors may hinder break-point/segment analysis: Background Correction applied, fits  supplied background time-series  spline term: s(background). Seasonality applied, fits regular  frequency terms, e.g. day.hour, year.day,  spline terms, default TRUE equivalent  s(day.hour) s(year.day). terms  calculated date column data. Weather applied, fits time-series  identified meteorological measurements, e.g. wind speed  direction (ws wd data).  ws wd present  fitted tensor term te(ws, wd).  deweathering terms, included, fitted  spline term s(term). default TRUE  equivalent te(ws, wd). Using supplied arguments, builds signal (mgcv) GAM model, calculates, returns mean-centred residuals estimate isolated local contribution.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"isolateContribution — isolate.signal","text":"method included part method development testing work, retained now. Please ignore now.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"isolateContribution — isolate.signal","text":"Regarding mgcv GAM fitting methods, see Wood (2017) general introduction package documentation regarding coding (mgcv): Wood, S.N. (2017) Generalized Additive Models: introduction R (2nd edition), CRC, DOI: doi: 10.1201/9781420010404 . Regarding isolateContribution, see: Ropkins et al (Prep).","code":""},{"path":[]},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"isolateContribution — isolate.signal","text":"Karl Ropkins","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/isolate.signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"isolateContribution — isolate.signal","text":"","code":"#fitting a simple deseasonalisation, deweathering #and background correction (dswb) model to no2:  aq.data$dswb.no2 <- isolateContribution(aq.data,                         \"no2\", background=\"bg.no2\") #> no2 ~ +s(bg.no2) + te(wd, ws) + s(year.day) + s(day.hour)  #compare at 7 day resolution: temp <- openair::timeAverage(aq.data, \"7 day\")  #without dswb quantBreakPoints(temp, \"no2\", test=FALSE, h=0.1) #> Using all 6 suggested breaks #>  #> 2001-04-16 (2001-03-12 to 2001-07-09) #> 47.28->32.73;-14.55 (-31%) #>  #> 2001-09-17 (2001-08-20 to 2001-10-15) #> 34.76->48.21;13.45 (39%) #>  #> 2002-01-07 (2001-12-10 to 2002-02-11) #> 49.79->34.08;-15.71 (-32%) #>  #> 2002-09-16 (2002-07-15 to 2002-10-21) #> 37.42->46.96;9.545 (26%) #>  #> 2003-04-21 (2003-03-31 to 2003-06-16) #> 49.99->32.47;-17.52 (-35%) #>  #> 2003-08-25 (2003-08-04 to 2003-09-15) #> 34.02->48;13.98 (41%)   #with dswb quantBreakPoints(temp, \"dswb.no2\", test=FALSE, h=0.1) #> Using all 1 suggested breaks #>  #> 2002-12-30 (2002-10-21 to 2003-02-17) #> 40.78->44.51;3.727 (9.1%)"},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"quantify break-point/segments — quantify.breaks","title":"quantify break-point/segments — quantify.breaks","text":"Quantify either break-points break-segment methods pollutant time-series","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quantify break-point/segments — quantify.breaks","text":"","code":"quantBreakPoints(   data,   pollutant,   breaks,   ylab = NULL,   xlab = NULL,   pt.col = c(\"lightgrey\", \"darkgrey\"),   line.col = \"red\",   break.col = \"blue\",   show = c(\"plot\", \"report\"),   ... )  quantBreakSegments(   data,   pollutant,   breaks,   ylab = NULL,   xlab = NULL,   pt.col = c(\"lightgrey\", \"darkgrey\"),   line.col = \"red\",   break.col = \"blue\",   seg.method = 2,   show = c(\"plot\", \"report\"),   ... )"},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quantify break-point/segments — quantify.breaks","text":"data Data source, typically data.frame similar, containing data-series model paired time-stamp data-series, named date. pollutant name data-series break-point break-segment model. breaks (Optional) break-points confidence intervals use building either break-point break-segment models. supplied build using findBreakPoints supplied arguments. ylab Y-label term, default pollutant. xlab X-label term, default date. pt.col Point fill line colours plot, defaults lightgrey darkgrey. line.col Line colour plot, default red. break.col Break-point/segment colour plot, default blue. show show returning break-point quantification mode, default plot report. ... parameters seg.method (quantBreakSegments ) break-segment fitting method use.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quantify break-point/segments — quantify.breaks","text":"functions use show argument control elements functions outputs shown also invisible return listof outputs can caught using, e.g.: brk.mod <- quantBreakPoints(data, pollutant)","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"quantify break-point/segments — quantify.breaks","text":"quantBreakPoints quantBreakSegments use strucchange methods identify potential break-points time-series, quantify conventional break-points break-segments, respectively: Finding Break-points Using   strucchange methods Zeileis colleagues   independent change detection model, functions   apply rolling-window approach, assuming first   window (data subset) without change, building   statistical model , advancing window,   building second model comparing , ,   identify likely points change   larger data-series. See also findBreakPoints Quantifying Break-points Using   supplied break-points build break-point model. Quantifying Break-segments Using   confidence regions supplied break-points   starting points build break-segment model.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"quantify break-point/segments — quantify.breaks","text":"AQEval function quantBreakSegments currently running segmented v.1.3-4 evaluate latest version, v.1.4-0.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"quantify break-point/segments — quantify.breaks","text":"Regarding strucchange methods see -package documentation, e.g. breakpoints, : Achim Zeileis, Friedrich Leisch, Kurt Hornik Christian Kleiber (2002). strucchange: R Package Testing Structural Change Linear Regression Models. Journal Statistical Software, 7(2), 1-38. URL https://www.jstatsoft.org/v07/i02/. Achim Zeileis, Christian Kleiber, Walter Kraemer Kurt Hornik (2003). Testing Dating Structural Changes Practice. Computational Statistics & Data Analysis, 44, 109-123. DOI doi: 10.1016/S0167-9473(03)00030-6 . Regarding segmented methods see -package documentation, e.g. segmented, : Vito M. R. Muggeo (2003). Estimating regression models   unknown break-points. Statistics Medicine, 22,   3055-3071. DOI doi: 10.1002/sim.1545 . Vito M. R. Muggeo (2008). segmented: R Package   Fit Regression Models Broken-Line Relationships.   R News, 8/1, 20-25.   URL https://cran.r-project.org/doc/Rnews/. Vito M. R. Muggeo (2016). Testing nuisance   parameter present alternative:   score-based approach application segmented   modelling. J Statistical Computation Simulation,   86, 3059-3067.   DOI doi: 10.1080/00949655.2016.1149855 . Vito M. R. Muggeo (2017). Interval estimation   breakpoint segmented regression: smoothed   score-based approach. Australian & New Zealand Journal   Statistics, 59, 311-322.   DOI doi: 10.1111/anzs.12200 . Regarding break-points/segment methods, see: Ropkins et al (Prep).","code":""},{"path":[]},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"quantify break-point/segments — quantify.breaks","text":"Karl Ropkins","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/quantify.breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"quantify break-point/segments — quantify.breaks","text":"","code":"#using openair timeAverage to covert 1-hour data to 1-day averages  temp <- openair::timeAverage(aq.data, \"1 day\")  #break-points  quantBreakPoints(temp, \"no2\", h=0.3) #> Using 1 of 1 suggested breaks: 1 #>  #> 2002-09-26 (2002-05-24 to 2003-01-08) #> 35.93->47.28;11.35 (32%)   #break-segments  quantBreakSegments(temp, \"no2\", h=0.3) #> Using 1 of 1 suggested breaks: 1 #> Error in lm.fit(x, y, offset = offset, singular.ok = singular.ok, ...) :  #>   0 (non-NA) cases #> building  3  segments #>  #> 2001-01-01 to 2002-08-26 (602) #> 43.78->35.57;-8.208 (-18.75%) #>  #> 2002-08-26 to 2002-10-21 (56) #> 35.57->46.02;10.44 (29.35%) #>  #> 2002-10-21 to 2003-12-31 (436) #> 46.02->43.61;-2.406 (-5.23%)"},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Analysis — spectral.analysis","title":"Spectral Analysis — spectral.analysis","text":"Time-series spectral frequency analysis.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Analysis — spectral.analysis","text":"","code":"spectralFrequency(data, pollutant, ...)"},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral Analysis — spectral.analysis","text":"data data.frame holding data analysed, expected contain timestamp data-series called date measurement time-series analysed identified using pollutant argument. pollutant name time-series, typically pollutant measurements, analysed. ... extra arguments.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral Analysis — spectral.analysis","text":"spectralFrequency uses showargument control elements functions outputs shown also invisibly returns listof outputs can caught using, e.g.: sfa.mod <- spectralFrequency(data, pollutant)","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spectral Analysis — spectral.analysis","text":"spectralFrequency producing time frequency analysis requested pollutant.","code":""},{"path":"https://karlropkins.github.io/AQEval/reference/spectral.analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral Analysis — spectral.analysis","text":"","code":"#no2 spectral frequency spectralFrequency(aq.data, \"no2\")"},{"path":"https://karlropkins.github.io/AQEval/news/index.html","id":"aqeval-version-03","dir":"Changelog","previous_headings":"","what":"AQEval version 0.3","title":"AQEval version 0.3","text":"v 0.3.0 [2022-03-18] Beta package release preliminary website release v 0.3.1 [2022-03-25] Package update, quantBreakSegments tidy silent try v 0.3.2 [2022-03-31] package updates, url -> doi (name ) docs ahead CRAN submission","code":""}]
